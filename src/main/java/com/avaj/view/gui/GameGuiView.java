package com.avaj.view.gui;import com.avaj.controller.GameController;import com.avaj.database.HeroManager;import com.avaj.model.GameGlobalInstance;import com.avaj.model.artifact.Armor;import com.avaj.model.artifact.Artifact;import com.avaj.model.artifact.Helm;import com.avaj.model.artifact.Weapon;import com.avaj.model.enemy.Enemy;import com.avaj.model.hero.Hero;import com.avaj.model.map.Direction;import com.avaj.model.map.Map;import javax.swing.*;import java.awt.*;import java.util.Random;import static com.avaj.model.GameGlobalInstance.*;public class GameGuiView {    private final Hero hero;    private final Map map;    private final HeroManager heroManger;    private final Random random = new Random();    private final GameController gameController;    private final JFrame frame;    private JLabel avatarLabel;  // Sol panel: Avatar    private JTextArea heroStats; // Sol panel: Kahraman bilgileri    private JTextArea enemyStats; // Sol panel: Kahraman bilgileri    private JPanel mapPanel;    private JTextArea gameLog;    private JPanel controlPanel; // üìå Butonlarƒ± eklemek i√ßin    private JPanel enemyInfoPanel; // üìå D√º≈üman Bilgileri Paneli (≈ûimdilik bo≈ü)    private JLabel enemyAvatarLabel;    public GameGuiView(Hero hero, Map map, HeroManager heroManager, GameController gameController) {        this.hero = hero;        this.gameController = gameController;        this.map = map;        this.heroManger = heroManager;        frame = new JFrame("Swingy - RPG Game");        initializeUI();    }    private void initializeUI() {        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(1000, 800);        frame.setLayout(new BorderLayout());        frame.setLocationRelativeTo(null);        // üìå Sol Panel: Kahraman Bilgileri        JPanel leftPanel = new JPanel(new BorderLayout());        leftPanel.setPreferredSize(new Dimension(250, frame.getHeight()));        leftPanel.setBackground(new Color(240, 240, 240));        avatarLabel = new JLabel();        avatarLabel.setHorizontalAlignment(SwingConstants.CENTER);        updateAvatar(hero.getAvatarPath());        heroStats = new JTextArea();        heroStats.setEditable(false);        heroStats.setFont(new Font("Arial", Font.BOLD, 18));        heroStats.setOpaque(false);        heroStats.setMargin(new Insets(10, 10, 10, 10));        updateHeroStats();        leftPanel.add(avatarLabel, BorderLayout.NORTH);        leftPanel.add(new JScrollPane(heroStats), BorderLayout.CENTER);        // üìå Orta Panel: Harita + Log Paneli        JPanel centerPanel = new JPanel(new BorderLayout());        mapPanel = new JPanel();        mapPanel.setLayout(new GridLayout(map.getSize(), map.getSize(), 2, 2));        updateMap();        // üìå Oyun G√ºnl√ºƒü√º: Haritanƒ±n altƒ±na eklenen log paneli        gameLog = new JTextArea();        gameLog.setEditable(false);        gameLog.setFont(new Font("Arial", Font.PLAIN, 16));        gameLog.setMargin(new Insets(10, 10, 10, 10));        JScrollPane gameLogScroll = new JScrollPane(gameLog);        gameLogScroll.setPreferredSize(new Dimension(frame.getWidth(), 150));        var gameStartLog = "Game started...\n";        gameLog.setText(gameStartLog);        centerPanel.add(mapPanel, BorderLayout.CENTER);        centerPanel.add(gameLogScroll, BorderLayout.SOUTH);        // üìå Saƒü Panel: D√º≈üman Bilgileri + Y√∂n Butonlarƒ±        JPanel rightPanel = new JPanel(new BorderLayout());        rightPanel.setPreferredSize(new Dimension(250, frame.getHeight()));        rightPanel.setBackground(new Color(240, 240, 240));        // üìå D√º≈üman Bilgileri Paneli (Yeni Avatar Dahil)        enemyInfoPanel = new JPanel(new BorderLayout());        enemyInfoPanel.setPreferredSize(new Dimension(250, 250));        enemyInfoPanel.setBackground(new Color(255, 255, 255));        enemyInfoPanel.setBorder(BorderFactory.createTitledBorder("Enemy Info"));        // üìå D√º≈üman Avatarƒ±        enemyAvatarLabel = new JLabel();        enemyAvatarLabel.setHorizontalAlignment(SwingConstants.CENTER);        updateEnemyAvatar(null); // Ba≈ülangƒ±√ßta bo≈ü        // üìå D√º≈üman Bilgileri Alanƒ±        enemyStats = new JTextArea();        enemyStats.setEditable(false);        enemyStats.setFont(new Font("Arial", Font.BOLD, 16));        enemyStats.setOpaque(false);        enemyStats.setMargin(new Insets(10, 10, 10, 10));        enemyStats.setText("No enemy nearby."); // Varsayƒ±lan metin        enemyInfoPanel.add(enemyAvatarLabel, BorderLayout.NORTH);        enemyInfoPanel.add(new JScrollPane(enemyStats), BorderLayout.CENTER);        // üìå Hareket Butonlarƒ± K√º√ß√ºlt√ºlerek Alta Ta≈üƒ±ndƒ±        controlPanel = new JPanel();        controlPanel.setLayout(new GridLayout(3, 3, 3, 3));        controlPanel.setPreferredSize(new Dimension(250, 120));        addControlButtons();        rightPanel.add(enemyInfoPanel, BorderLayout.CENTER);        rightPanel.add(controlPanel, BorderLayout.SOUTH);        // üìå Frame'e panelleri ekle        frame.add(leftPanel, BorderLayout.WEST);        frame.add(centerPanel, BorderLayout.CENTER);        frame.add(rightPanel, BorderLayout.EAST);        frame.addWindowListener(new java.awt.event.WindowAdapter() {            @Override            public void windowClosing(java.awt.event.WindowEvent windowEvent) {                // Kahraman bilgilerini kaydet                heroManger.updateHeroStatus(                        hero.getName(), hero.getLevel(), hero.getExperience(),                        hero.getAttack(), hero.getDefense(), hero.getHitPoints(),                        hero.getX(), hero.getY());                // Son bir log mesajƒ± ekleyelim                gameLog.append("üíæ Game state saved before closing.\n");                // Frame'i kapat                frame.dispose();                System.exit(0);            }        });        frame.setVisible(true);    }    private void addControlButtons() {        JButton northButton = createMovementButton("\u2B06 North", Direction.NORTH);        JButton southButton = createMovementButton("\u2B07 South", Direction.SOUTH);        JButton eastButton = createMovementButton("\u27A1 East", Direction.EAST);        JButton westButton = createMovementButton("\u2B05 West", Direction.WEST);        northButton.setPreferredSize(new Dimension(70, 30));        southButton.setPreferredSize(new Dimension(70, 30));        eastButton.setPreferredSize(new Dimension(70, 30));        westButton.setPreferredSize(new Dimension(70, 30));        controlPanel.add(new JLabel(""));        controlPanel.add(northButton);        controlPanel.add(new JLabel(""));        controlPanel.add(westButton);        controlPanel.add(new JLabel(""));        controlPanel.add(eastButton);        controlPanel.add(new JLabel(""));        controlPanel.add(southButton);        controlPanel.add(new JLabel(""));    }    private JButton createMovementButton(String text, Direction direction) {        JButton button = new JButton(text);        button.setFont(new Font("Arial", Font.BOLD, 12)); // üìå Daha k√º√ß√ºk font        button.setFocusPainted(false);        button.setBackground(new Color(100, 150, 255));        button.setForeground(Color.BLUE);        button.setBorder(BorderFactory.createLineBorder(Color.GREEN, 1));        button.addActionListener(e -> moveHero(direction));        return button;    }    private void moveHero(Direction direction) {        int[] newPos = hero.getNewPosition(direction);        int newX = newPos[0];        int newY = newPos[1];        if (map.isValidMove(newX, newY)) {            gameLog.append("‚û° Hero moved to (" + newX + ", " + newY + ")\n");            char cellContent = map.getGrid(newX, newY);            if (map.isEnemy(cellContent)) {                handleVillainEncounter(newX, newY);            } else if (cellContent == GameGlobalInstance.ARTIFACT) {                Artifact artifact = getRandomArtifact();                gameLog.append("‚ú® Found an artifact => " + artifact + "\n");                hero.equipArtifact(artifact);                updateHeroStats();            }            map.moveHero(direction, heroManger);            updateMap();            heroManger.updateHeroStatus(                    hero.getName(), hero.getLevel(), hero.getExperience(),                    hero.getAttack(), hero.getDefense(), hero.getHitPoints(),                    hero.getX(), hero.getY());            if (map.isHeroAtBorder())            {                gameLog.append("You are border! Border is the end of the game, game over!\n");                JOptionPane.showMessageDialog(null,                        "You hit the border. Try Again!",                        "Game Over", JOptionPane.WARNING_MESSAGE);                int position = map.getSize() / 2;                heroManger.updateHeroPosition(hero.getName(), position, position);                closeGame();            }        } else {            gameLog.append("‚õî Cannot move there!\n");        }    }    private Artifact getRandomArtifact()    {        var randomNumber = random.nextInt(1, 3);        var randomBoost = random.nextInt(1, 45);        if (randomNumber == 1)            return new Armor("ARMOR", randomBoost);        else if (randomNumber == 2)            return new Helm("HELM", randomBoost);        else            return new Weapon("WEAPON", randomBoost);    }    private void handleVillainEncounter(int x, int y) {        gameLog.append("‚öîÔ∏è A villain blocks your path!\n");        // üìå D√º≈ümanƒ± bul ve sava≈üƒ± ba≈ülat        Enemy enemy = map.getEnemyAt(x, y);        updateEnemyInfo(enemy, x, y); // üìå Hareket sonrasƒ± d√º≈üman bilgilerini g√ºncelle        int option = JOptionPane.showOptionDialog(frame,                "You encountered a villain! What will you do?",                "Villain Encounter",                JOptionPane.YES_NO_OPTION,                JOptionPane.WARNING_MESSAGE,                null,                new String[]{"Fight", "Run"},                "Fight");        if (option == JOptionPane.NO_OPTION && Math.random() < 0.5) {            gameLog.append("üèÉ You successfully escaped!\n");            return;        }        if (enemy != null) {            gameController.startBattleForUi(enemy);        }        assert enemy != null;        if (enemy.getHitPoint() <= 0) { // D√º≈üman √∂ld√ºyse            int xpGained = enemy.getStrength() * 500; // D√º≈üman seviyesine baƒülƒ± XP hesapla            hero.gainExperience(xpGained); // Kahramana XP ekle            gameLog.append("üèÜ " + hero.getName() + " won the battle and gained " + xpGained + " XP!");            hero.Heal();            updateHeroStats();        }    }    private void updateMap() {        mapPanel.removeAll();        for (int i = 0; i < map.getSize(); i++) {            for (int j = 0; j < map.getSize(); j++) {                mapPanel.add(getMapSymbol(i, j));            }        }        mapPanel.revalidate();        mapPanel.repaint();    }    // üìå Harita h√ºcrelerini simgeyle g√∂ster    private JLabel getMapSymbol(int x, int y) {        JLabel label = new JLabel();        label.setHorizontalAlignment(SwingConstants.CENTER);        label.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));        String imagePath; // Varsayƒ±lan resim        if (!map.isVisible(x, y)) {            imagePath = UNVISIBLE_ICON_PATH;        } else {            switch (map.getGrid(x, y)) {                case GameGlobalInstance.HERO:                    imagePath = hero.getAvatarPath();                    break;                case GameGlobalInstance.GhostEnemy:                    imagePath = GhostEnemyICON_PATH;                    break;                case GameGlobalInstance.ZombieGirlEnemy:                    imagePath = ZombieGirlEnemy_ICON_PATH;                    break;                case GameGlobalInstance.BlueEnemy:                    imagePath = BlueEnemy_Icon_Path;                    break;                case GameGlobalInstance.GreenEnemy:                    imagePath = GreenEnemy_ICON_PATH;                    break;                case GameGlobalInstance.PurpleVILLAIN:                    imagePath = PurpleVILLAIN5_ICON_PATH;                    break;                case GameGlobalInstance.ZombieGuyVILLAIN:                    imagePath = ZombieVILLAIN6_ICON_Path;                    break;                case GameGlobalInstance.ARTIFACT:                    imagePath = ARTIFACT_ICON_PATH;                    break;                default:                    imagePath = EMPTY_ICON_PATH;                    break;            }        }        // Resmi √∂nbellekten al        label.setIcon(GameGlobalInstance.getImage(imagePath));        return label;    }    // üìå Avatarƒ± G√ºncelle    private void updateAvatar(String avatarPath) {        if (avatarPath != null && !avatarPath.isEmpty()) {            ImageIcon icon = new ImageIcon(avatarPath);            Image img = icon.getImage().getScaledInstance(200, 200, Image.SCALE_SMOOTH);            avatarLabel.setIcon(new ImageIcon(img));        } else {            avatarLabel.setIcon(null);        }    }    private void updateEnemyInfo(Enemy enemy, int x, int y) {        if (enemy != null) {            // üìå D√º≈üman Avatarƒ±nƒ± G√ºncelle            updateEnemyAvatar(enemy.getAvatarPath());            // üìå D√º≈üman Bilgilerini G√ºncelle            enemyStats.setText("Enemy Detected!\n");            enemyStats.append("Class: " + enemy.getClas() + "\n");            enemyStats.append("Position: (" + x + ", " + y + ")\n");            enemyStats.append("Health: " + enemy.getHitPoint() + " HP\n");            enemyStats.append("Attack: " + enemy.getAttack() + "\n");            enemyStats.append("Defense: " + enemy.getDefence() + "\n");            enemyStats.append("Strength: " + enemy.getStrength() + "\n");        } else {            enemyStats.setText("No enemy nearby.");            updateEnemyAvatar(null); // üìå D√º≈üman yoksa avatarƒ± kaldƒ±r        }    }    // üìå D√º≈üman Avatarƒ±nƒ± G√ºncelle    private void updateEnemyAvatar(String avatarPath) {        if (avatarPath != null && !avatarPath.isEmpty()) {            ImageIcon icon = new ImageIcon(avatarPath);            Image img = icon.getImage().getScaledInstance(200, 200, Image.SCALE_SMOOTH);            enemyAvatarLabel.setIcon(new ImageIcon(img));        } else {            enemyAvatarLabel.setIcon(null); // üìå D√º≈üman yoksa avatarƒ± g√∂sterme        }    }    // üìå Kahraman Bilgilerini G√ºncelle    private void updateHeroStats() {        heroStats.setText(                "üõ°Ô∏è Name: " + hero.getName() + "\n" +                        "‚öîÔ∏è Class: " + hero.getHeroClass() + "\n" +                        "üìà Level: " + hero.getLevel() + "\n" +                        "üèÖ Exp: " + hero.getExperience() + "\n" +                        "üèÖ Attack: " + hero.getAttack() + "\n" +                        "üèÖ Defense: " + hero.getDefense() + "\n" +                        "üèÖ Hit Points: " + hero.getHitPoints() + "\n" +                        "‚ù§Ô∏è HP: " + hero.getHitPoints()        );    }    public void UpdateHeroStatAfterVictory(Enemy enemy)    {        if (enemy.getHitPoint() <= 0) { // D√º≈üman √∂ld√ºyse            int xpGained = enemy.getStrength() * 500; // D√º≈üman seviyesine baƒülƒ± XP hesapla            hero.gainExperience(xpGained); // Kahramana XP ekle            gameLog.append("üèÜ " + hero.getName() + " won the battle and gained " + xpGained + " XP!");            hero.Heal();            updateHeroStats();        }    }    public void closeGame() {        frame.dispose(); // Ana oyun GUI'yi kapat        System.exit(0);  // Oyun tamamen kapansƒ±n    }}